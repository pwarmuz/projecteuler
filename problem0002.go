/*
   @Project:            projecteuler
   @Author:             Phil
   @Date:               2017-05-06 15:57:49
   +Last Modified by:   Phil
   +Last Modified time: 2017-05-08 01:15:30
*/
package projecteuler

var sum uint

func Problem0002() uint {
	sum = 0
	fib := Fibonacci()
	//  1000 is a wild guess I'd like to get this accurate
	for i := 0; i < 1000; i++ {
		fib(4000000)
	}
	return sum
}

func Fibonacci() func(uint) uint {
	/*  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
	    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
	*/
	/*  Go makes a beautiful fibonacci seq*/
	var f, s uint
	f, s = 0, 1
	return func(limit uint) (ret uint) {
		if f >= limit {
			return
		}
		if f%2 == 0 {
			//4613732
			sum += f
		}
		ret, f, s = f, s, f+s
		return
	}
}
