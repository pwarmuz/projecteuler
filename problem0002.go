package main

import (
	"fmt"
	"math"
)

func Problem0002() {
	var sum fibSum
	fib := sum.Fibonacci(4000000)
	fib()
	fmt.Printf("total %d of fib seq\n", sum)
}

// findN will find the limit of loops
func findN(m uint) int {
	return int(math.Log(float64(m)*math.Sqrt(5)) / math.Log((1+math.Sqrt(5))/2))
}

type fibSum uint

func (sum *fibSum) Fibonacci(limit uint) func() uint {
	/*  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
	    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
		 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
	*/
	// This uses Go closures
	var f, s uint
	f, s = 0, 1

	n := findN(limit)

	return func() uint {
		for i := 0; i <= n; i++ {
			// if the increment assignment happens before the modulo check then the assignment changes to
			// result, f, s = f, s, f+s where result would be assigned as result%2 and fibSum(result) amending f
			if f%2 == 0 {
				// Find the sum of the even number terms
				*sum += fibSum(f)
			}
			f, s = s, f+s
		}
		// return of the last fib value
		return f
	}
}
